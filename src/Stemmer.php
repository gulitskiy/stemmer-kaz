<?php
namespace StemmerKaz;

/**
 * Base class for stemmer.
 */
class Stemmer
{
    /**
     * Known suffixes for kazakh language.
     *
     * @var array
     */
    protected $suffixes = [
        'мын', 'мiн', 'бын', 'бiн', 'пын', 'пiн', 'мыз', 'мiз', 'быз', 'бiз', 'пыз', 'пiз', 'сың', 'сiң', 
        'сыңдар', 'сiңдер', 'сыз', 'сiз', 'сыздар', 'сiздер', 'ңдар', 'ңдер', 'ңыз',
        'ңiз', 'ңыздар', 'ңiздер', 'сы', 'сi', 'дан', 'ден', 'тан', 'тен', 'нан', 'нен', 'да',
        'де', 'та', 'те', 'нда', 'нде', 'ға', 'ге', 'қа', 'ке', 'на', 'не', 'дың', 'дiң', 'тың',
        'тiң', 'ның', 'нiң', 'ды', 'дi', 'ты', 'тi', 'ны', 'нi', 'н', 'дiкi', 'тiкi', 'нiкi', 'дар', 'дер',
        'тар', 'тер', 'лар', 'лер', 'ба', 'бе', 'па', 'пе', 'ма', 'ме', 'бен', 'пен', 'мен', 'лы', 'лi',
        'ғы', 'гi', 'қы', 'кi', 'дай', 'дей', 'тай', 'тей', 'дық', 'дiк', 'тық', 'тiк', 'лық', 'лiк', 'паз',
        'ғыш', 'гiш', 'қыш', 'кiш', 'шек', 'шақ', 'шыл', 'шiл', 'ншi', 'ншы', 'ау', 'еу', 'дап', 'деп',
        'тап', 'теп', 'лап', 'леп', 'даған', 'деген', 'таған', 'теген', 'лаған', 'леген', 'ла', 'ле', 'даc',
        'деc', 'таc', 'теc', 'лаc', 'леc', 'ар', 'ер', 'ғар', 'гер', 'қар', 'кер', 'дыр', 'дiр', 'тыр',
        'тiр', 'ғыз', 'гiз', 'қыз', 'кiз', 'ған', 'ген', 'қан', 'кен', 'атын', 'етiн',
        'йтын', 'йтiн', 'ушы', 'ушi', 'р', 'п', 'ып', 'iп', 'й', 'ғалы', 'гелi', 'қалы', 'келi', 'ша', 'ше',
        'лай', 'лей', 'дайын', 'дейін', 'тайын', 'тейін', 'шама', 'шеме', 'шалық', 'шелік', 'сын', 'сiн', 'са',
        'се', 'бақ', 'бек', 'пақ', 'пек', 'мақ', 'мек', 'йын', 'йiн', 'йық', 'йiк',
    ];

    /**
     * Public constructor.
     */
    public function __construct()
    {
        usort($this->suffixes, function ($a, $b) {
            $aLen = mb_strlen($a);
            $bLen = mb_strlen($b);

            return (($aLen === $bLen)
                ? 0
                : (($aLen > $bLen)
                    ? -1
                    : 1));
        });

        $this->suffixes = array_map(function ($item) {
            return "#(" . $item . ")$#iu";
        }, $this->suffixes);
    }

    /**
     * Stemming method.
     *
     * @param  string $word
     * @return string
     */
    public function stemWord($word)
    {
        $newWord = preg_replace($this->suffixes, "", $word, 1);

        if (strcmp($newWord, $word) !== 0) {
            return $this->stemWord($newWord);
        }

        return mb_strtolower($newWord);
    }
}